-- Retrieve all records from the 'customer' table
SELECT * FROM customer;

-- Change delimiter for creating stored procedures
DELIMITER $$

-- Create a stored procedure 'GetAllCustomers' to fetch all customers
CREATE PROCEDURE GetAllCustomers()
BEGIN
    SELECT * FROM customer;
END $$

-- Reset delimiter to default
DELIMITER ;

-- Call the 'GetAllCustomers' stored procedure
CALL GetAllCustomers();

-- Change delimiter for creating the next stored procedure
DELIMITER $$

-- Create a stored procedure 'GetUserByName' to fetch customer by first name
CREATE PROCEDURE GetUserByName(
    IN firstname VARCHAR(255)
)
BEGIN
    SELECT *
    FROM customer
    WHERE first_name = firstname;
END $$

-- Reset delimiter to default
DELIMITER ;

-- Call the 'GetUserByName' stored procedure with a parameter
CALL GetUserByName('Mike');

-- Change delimiter for creating the next stored procedure
DELIMITER $$

-- Create a stored procedure 'GetOrderSumByCustomerID' to calculate total payment amount by customer ID
CREATE PROCEDURE GetOrderSumByCustomerID (
    IN customerid INT(25),
    OUT total INT
)
BEGIN
    SELECT SUM(amount)
    INTO total
    FROM payment
    WHERE customer_id = customerid;
END $$

-- Reset delimiter to default
DELIMITER ;

-- Call the 'GetOrderSumByCustomerID' stored procedure with an OUT parameter
CALL GetOrderSumByCustomerID(200);
-- Alternatively, call the procedure with an OUT parameter and capture the result
CALL GetOrderSumByCustomerID(200, @total);
-- Display the result stored in the @total variable
SELECT @total AS TotalRentPaid;

-- Change delimiter to $$ for creating stored procedures
DELIMITER $$

-- Create a stored procedure named 'SetCounter'
-- This procedure takes an INOUT parameter 'counter' (an integer) and an IN parameter 'inc' (an integer)
CREATE PROCEDURE SetCounter(
    INOUT counter INT,
    IN inc INT
)
BEGIN
    -- Modify the 'counter' value by adding the 'inc' value
    SET counter = counter + inc;
END $$

-- Reset delimiter to the default semicolon
DELIMITER ;

-- Set the initial value of the user-defined variable '@counter' to 1
SET @counter = 1;

-- Call the 'SetCounter' stored procedure with INOUT parameter and IN parameter
-- This will increment '@counter' by 1
CALL SetCounter(@Counter, 1); -- After this, '@counter' becomes 2

-- Display the value of the user-defined variable '@counter'
SELECT @counter; -- Output: 2

-- Call the 'SetCounter' stored procedure with INOUT parameter and IN parameter
-- This will increment '@counter' by 1 again
CALL SetCounter(@Counter, 1); -- After this, '@counter' becomes 3

-- Call the 'SetCounter' stored procedure with INOUT parameter and IN parameter
-- This will increment '@counter' by 5
CALL SetCounter(@Counter, 5); -- After this, '@counter' becomes 8

-- Display the final value of the user-defined variable '@counter'
SELECT @counter; -- Output: 8

-- End of SQL script

